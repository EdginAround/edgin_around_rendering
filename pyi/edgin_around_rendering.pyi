from typing import List, Optional, Set, Tuple

ActorId = int
Radian = float
Zoom = float

def init() -> None: ...

class Point:
    def __init__(self, theta: float, phi: float) -> None: ...
    def get_theta(self) -> float: ...
    def get_phi(self) -> float: ...

class Actor:
    def __init__(self, id: ActorId, entity_name: str, position: Optional[Point]) -> None: ...

class ElevationFunction:
    def __init__(self, radius: float) -> None: ...
    def add_terrain(self, name: str, theta: float, phi: float) -> None: ...

class Scene:
    def __init__(self) -> None: ...
    def configure(self, hero_actor_id: ActorId, elevation: ElevationFunction) -> None: ...
    def get_hero_id(self) -> ActorId: ...
    def create_actors(self, actors: List[Actor]) -> None: ...
    def delete_actors(self, actor_ids: List[ActorId]) -> None: ...
    def hide_actors(self, actor_ids: List[ActorId]) -> None: ...
    def get_radius(self) -> float: ...
    def find_closest_actors(self, position: Point, max_distance: float) -> List[ActorId]: ...
    def get_actor_position(self, actor_id: ActorId) -> Optional[Point]: ...
    def set_actor_position(self, actor_id: ActorId, position: Point) -> None: ...

class PreviewExpositor:
    def __init__(
        self,
        sprite_dir: str,
        skin_name: str,
        saml_name: str,
        variant_name: str,
        action_name: str,
        size: Tuple[int, int],
    ) -> None: ...
    def resize(self, width: int, height: int) -> None: ...
    def render(self) -> None: ...

class WorldExpositor:
    def __init__(self, resource_dir: str, size: Tuple[int, int]) -> None: ...
    def resize(self, width: int, height: int) -> None: ...
    def render(self, scene: Scene) -> None: ...
    def get_bearing(self) -> Radian: ...
    def get_highlighted_actor_id(self) -> Optional[ActorId]: ...
    def set_highlighted_actor_id(self, ActorId) -> None: ...
    def remove_highlight(self) -> None: ...
    def zoom_by(self, zoom: Zoom) -> None: ...
    def rotate_by(self, angle: Radian) -> None: ...
    def tilt_by(self, angle: Radian) -> None: ...
    def create_renderers(self, actors: List[Actor]) -> None: ...
    def delete_renderers(self, ids: List[ActorId]) -> None: ...
    def play_animation(self, actor_id: ActorId, animation_name: str) -> None: ...
    def select_variant(self, actor_id: ActorId, variant_name: str) -> None: ...
    def attach_actor(
        self,
        hook_name: str,
        base_actor_id: ActorId,
        attached_actor_id: Optional[ActorId],
    ) -> None: ...

