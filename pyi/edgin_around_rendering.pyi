from typing import List, Optional, Set, Tuple

ActorId = int
Radian = float
Zoom = float

def init() -> None: ...

class Point:
    def __init__(self, theta: float, phi: float) -> None: ...
    def get_theta(self) -> float: ...
    def get_phi(self) -> float: ...

class Actor:
    def __init__(self, id: ActorId, entity_name: str, position: Optional[Point]) -> None: ...

class ElevationFunction:
    def __init__(self, radius: float) -> None: ...
    def add_terrain(self, name: str, theta: float, phi: float) -> None: ...

class Scene:
    def __init__(self) -> None: ...
    def configure(self, hero_actor_id: ActorId, elevation: ElevationFunction) -> None: ...
    def create_actors(self, actors: List[Actor]) -> None: ...
    def delete_actors(self, actor_ids: List[ActorId]) -> None: ...
    def hide_actors(self, actor_ids: List[ActorId]) -> None: ...
    def get_radius(self) -> float: ...
    def get_actor_position(self, actor_id: ActorId) -> Point: ...
    def set_actor_position(self, actor_id: ActorId, position: Point) -> None: ...

class PreviewExpositor: ...

class WorldExpositor:
    def __init__(self, resource_dir: str, size: Tuple[int, int]) -> None: ...
    def resize(self, width: int, height: int) -> None: ...
    def render(self, scene: Scene) -> None: ...
    def get_bearing(self) -> Radian: ...
    def get_highlighted_actor_id(self) -> ActorId: ...
    def zoom_by(self, zoom: Zoom) -> None: ...
    def rotate_by(self, angle: Radian) -> None: ...
    def tilt_by(self, angle: Radian) -> None: ...
    def highlight(self, x: int, y: int) -> None: ...
    def create_renderers(self, actors: List[Actor]) -> None: ...
    def delete_renderers(self, ids: List[ActorId]) -> None: ...

